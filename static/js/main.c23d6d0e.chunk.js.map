{"version":3,"sources":["components/Wrapper/index.js","Utils/API.js","components/Container/index.js","components/NameSearch/index.js","components/Table/index.js","pages/Home.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","axios","get","Container","fluid","NameSearch","htmlFor","value","search","onChange","handleInputChange","name","aria-label","type","list","placeholder","Table","sortEmployees","employees","useState","sortBy","setSortBy","sortColumn","key","sort","a","b","scope","style","textAlign","onClick","map","employee","login","username","src","picture","large","alt","first","last","email","phone","dob","age","Home","setEmployees","setSearch","results","setResults","useEffect","API","then","res","data","console","log","catch","err","e","target","filter","toLowerCase","trim","indexOf","Header","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c23d6d0e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return <main className=\"wrapper\" {...props} />;\n}\n\nexport default Wrapper;","import axios from \"axios\";\n\n// Export an object containing methods we'll use for accessing the RandomUser API\n\nexport default {\n  //get all employees\n  getEmpoloyeeInfo: function() {\n    return axios.get('https://randomuser.me/api/?results=200&nat=us');\n  }\n};\n","import React from \"react\";\n\nfunction Container (props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Container;\n\n\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction NameSearch(props) {\n  return (\n    //create search box for finding employees quicker\n    <form className=\"search\">\n      <div className=\"form-group\">\n        <label htmlFor=\"language\">Search for Employee:</label>\n        <input\n          value={props.search}\n          onChange={props.handleInputChange}\n          name=\"term\"\n          aria-label=\"Search\"\n          type=\"text\"\n          list=\"term\"\n          className=\"form-control\"\n          placeholder=\"Begin typing to search by name\"\n        />\n        </div>\n    </form>\n  );\n}\n\nexport default NameSearch;\n","import React, { useState } from \"react\";\n\nfunction Table({ employees }) {\n  let sortEmployees = employees;\n  //useState returns that state (sortBy) of an object that is being maintained,\n  //and a function (setSortBy) that you can call to change the state\n  const [sortBy, setSortBy] = useState(true);\n\n  const sortColumn = (key) => {\n    //call sortEmployees.sort and pass it a sorting function\n    sortEmployees.sort(function (a, b) {\n      if (sortBy) {\n        //if the name property of the first argument is before the second argument, it is positive;\n        //if the name property of the first argument is after the second argument, it is negative;\n        //if the two name properties are equal, it is 0\n        return (a.name[key] > b.name[key]) ? 1 : ((a.name[key] < b.name[key]) ? -1 : 0);\n      } else {\n        return (b.name[key] > a.name[key]) ? 1 : ((b.name[key] < a.name[key]) ? -1 : 0);\n      }\n    });\n    setSortBy(!sortBy);\n  };\n\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          {/* Creating and aligning the column titles */}\n          <th scope=\"col\"style={{textAlign:\"center\"}}>Photo</th>\n          <th scope=\"col\"style={{textAlign:\"center\"}}><button type=\"button\" onClick={() => { sortColumn(\"first\") }} className=\"btn\"><i className=\"fas fa-sort\"></i></button>First Name</th>\n          <th scope=\"col\"style={{textAlign:\"center\"}}><button type=\"button\" onClick={() => { sortColumn(\"last\") }} className=\"btn\"><i className=\"fas fa-sort\"></i></button>Last Name</th>\n          <th scope=\"col\"style={{textAlign:\"center\"}}>Email</th>\n          <th scope=\"col\"style={{textAlign:\"center\"}}>Phone</th>\n          <th scope=\"col\"style={{textAlign:\"center\"}}>Age</th>\n          </tr>\n      </thead>\n      <tbody>\n        {/* Map takes the sortEmployees array and returns each employee and their value */}\n        {/* key is assigned to the employee login username */}\n        {sortEmployees.map(employee => {\n          return (\n            <tr key={employee.login.username}>\n              {/* Returns the employee info and aligns the text */}\n              <td style={{textAlign:\"center\"}}><img src={employee.picture.large} alt=\"employee\" className=\"img-thumbnail\" /></td>\n              <td style={{textAlign:\"center\"}}>{employee.name.first}</td>\n              <td style={{textAlign:\"center\"}}>{employee.name.last}</td>\n              <td style={{textAlign:\"center\"}}>{employee.email}</td>\n              <td style={{textAlign:\"center\"}}>{employee.phone}</td>\n              <td style={{textAlign:\"center\"}}>{employee.dob.age}</td>\n            </tr>\n          )\n        })}\n      </tbody>\n    </table>\n  );\n}\n\nexport default Table;\n","import React, { useEffect, useState } from \"react\";\nimport API from \"../Utils/API\";\nimport Container from \"../components/Container\";\nimport NameSearch from \"../components/NameSearch\";\nimport Table from \"../components/Table\";\n\nfunction Home() {\n  //set up State for any variable that we expect to change together\n  //useState is expected to return an array\n  const [employees, setEmployees] = useState([]);\n  //useState is expected to return a string\n  const [search, setSearch] = useState(\"\");\n  const [results, setResults] = useState([]);\n\n  //similar to componentDidMount, makes an API call and render some data as soon as the component loads\n  //useEffect takes in a parameter that is a function, and the function runs as soon as the component mounts\n  useEffect(() => {\n    //getEmployeeInfo is the API function name\n    API.getEmpoloyeeInfo()\n      .then((res) => {\n        //set state after we get response and makes app re-render\n        setEmployees(res.data.results);\n        setResults(res.data.results);\n        console.log(res.data.results);\n      })\n      .catch((err) => console.log(err));\n    //everytime you type in a new character, you are changing the value of the variable which is prompting the useEffect to run\n  }, []);\n\n  //value is what the user has typed\n  const filterEmployees = (value) => {\n    return employees.filter(\n      (employee) =>\n        //filter the employee array and build a new array\n        //give statement that returns true if we want to add word to the array or false if we don't\n        //toLowerCase() converts a string to lowercase letters; and trim() removes whitespace from both sides of a string. || means 'or'\n        employee.name.first.toLowerCase().trim().indexOf(value.toLowerCase()) > -1 ||\n        employee.name.last.toLowerCase().trim().indexOf(value.toLowerCase()) > - 1 ||\n        employee.email.toLowerCase().trim().indexOf(value.toLowerCase()) > - 1 \n    );\n  };\n\n  //event is typing in the letters\n  //target is the input\n  //value is what has been typed\n  const handleInputChange = (e) => {\n    console.log(e);\n    setSearch(e.target.value);\n    setResults(filterEmployees(e.target.value));\n  };\n\n  return (\n    <div>\n      <Container>\n        <NameSearch search={search} handleInputChange={handleInputChange} />\n        <Table employees={results} />\n      </Container>\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Header () {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1>Employee Directory</h1>\r\n            <p>To sort results by first or last name, simply click on the caret symbol or begin to type in the search bar.</p>\r\n        </div>    \r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\nimport { HashRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Wrapper from \"./components/Wrapper\";\nimport Home from \"./pages/Home\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n    <Wrapper>\n      <Router>\n        <Header />\n        <div>\n          <Route exact path=\"/\" component={Home} />\n        </div> \n      </Router>\n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}